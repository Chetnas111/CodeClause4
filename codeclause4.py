# -*- coding: utf-8 -*-
"""CodeClause4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ieZpM1V2Wdcir1n-1_3vDhzkVA1EGtX

#Project Title - Heart Disease Risk Assessment
#Project Level - Golden Level
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

df=pd.read_csv("/content/heart.csv")

df.head()

df.info()

df.describe()

df.shape

df.columns

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

df.head()

df.shape

# Get a General overview of the numerical data
sns.pairplot(df)
plt.show()

# Distribution of age
plt.figure(figsize=(8, 6))
sns.histplot(df['age'], kde=True)
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Relationship between age and maximum heart rate achieved
plt.figure(figsize=(8, 6))
sns.scatterplot(x='age', y='thalach', data=df, hue='target')
plt.title('Age vs. Maximum Heart Rate Achieved')
plt.xlabel('Age')
plt.ylabel('Maximum Heart Rate Achieved')
plt.show()

# Distribution of target variable
plt.figure(figsize=(6, 4))
sns.countplot(x='target', data=df)
plt.title('Distribution of Target Variable')
plt.xlabel('Target (0 = No Heart Disease, 1 = Heart Disease)')
plt.ylabel('Count')
plt.show()

# Correlation matrix heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix Heatmap')
plt.show()

# Boxplots for numerical features grouped by target variable
numerical_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']
for col in numerical_features:
    plt.figure(figsize=(8, 6))
    sns.boxplot(x='target', y=col, data=df)
    plt.title(f'Boxplot of {col} by Target')
    plt.xlabel('Target')
    plt.ylabel(col)
    plt.show()

# Separate features (X) and target variable (y)
X = df.drop('target', axis=1)
y = df['target']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling using StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize and train a Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the Logistic Regression model: {accuracy}")

# Initialize and train a Decision Tree Classifier
dt_model = DecisionTreeClassifier(random_state=42)  # You can adjust hyperparameters
dt_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred_dt = dt_model.predict(X_test)

# Evaluate the Decision Tree model
accuracy_dt = accuracy_score(y_test, y_pred_dt)
print(f"Accuracy of the Decision Tree model: {accuracy_dt}")

# Visualize the Decision Tree (optional, but recommended)
plt.figure(figsize=(20, 10))
tree.plot_tree(dt_model, feature_names=X.columns, class_names=['0','1'], filled=True)
plt.show()

# Pairplot for selected features
selected_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'target']
sns.pairplot(df[selected_features], hue='target')
plt.show()


# Interactive plot using Plotly Express
fig = px.scatter(df, x='age', y='thalach', color='target', title='Age vs. Maximum Heart Rate Achieved (Interactive)')
fig.show()

# 3D scatter plot (example with age, thalach, and chol)
fig = px.scatter_3d(df, x='age', y='thalach', z='chol', color='target', title='3D Scatter Plot')
fig.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix

# Random Forest Classifier
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
accuracy_rf = accuracy_score(y_test, y_pred_rf)
print(f"Accuracy of the Random Forest model: {accuracy_rf}")

# Support Vector Classifier
svm_model = SVC(random_state=42)
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)
accuracy_svm = accuracy_score(y_test, y_pred_svm)
print(f"Accuracy of the SVM model: {accuracy_svm}")

# Classification Report and Confusion Matrix for Decision Tree
print("Decision Tree Classification Report:")
print(classification_report(y_test, y_pred_dt))
print("Decision Tree Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_dt))

# Classification Report and Confusion Matrix for Random Forest
print("Random Forest Classification Report:")
print(classification_report(y_test, y_pred_rf))
print("Random Forest Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_rf))

# Classification Report and Confusion Matrix for SVM
print("SVM Classification Report:")
print(classification_report(y_test, y_pred_svm))
print("SVM Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_svm))

# Further analysis and visualization can be added here.
# Example: Feature Importance plot for Random Forest.
# Feature Importance
importances = rf_model.feature_importances_
indices = np.argsort(importances)[::-1]
plt.figure(figsize=(10,6))
plt.title('Feature Importances')
plt.bar(range(X.shape[1]), importances[indices])
plt.xticks(range(X.shape[1]), X.columns[indices], rotation=90)
plt.show()

# Example:  Explore the distribution of 'chol' (cholesterol) for different target groups
plt.figure(figsize=(10, 6))
sns.kdeplot(df[df['target'] == 0]['chol'], label='No Heart Disease', shade=True)
sns.kdeplot(df[df['target'] == 1]['chol'], label='Heart Disease', shade=True)
plt.xlabel('Cholesterol')
plt.ylabel('Density')
plt.title('Distribution of Cholesterol Levels by Target Variable')
plt.legend()
plt.show()

# Example: Box plot of 'oldpeak' (ST depression induced by exercise relative to rest)
plt.figure(figsize=(8, 6))
sns.boxplot(x='target', y='oldpeak', data=df)
plt.title('Distribution of ST Depression by Target Variable')
plt.show()

# Example: Examine the relationship between 'cp' (chest pain type) and 'target'
plt.figure(figsize=(8, 6))
sns.countplot(x='cp', hue='target', data=df)
plt.title('Chest Pain Type vs. Heart Disease')
plt.show()

# You can further explore other variables and relationships using similar methods
# For example, create more pairplots, scatter plots, histograms, etc.
# with other combinations of features.

# Interaction with the user for feature selection:
selected_feature = "thalach" #@param ["age", "trestbps", "chol", "thalach", "oldpeak"]
plt.figure(figsize=(8,6))
sns.histplot(df[selected_feature], kde = True)
plt.show()

#Outlier detection and removal for 'chol' (cholesterol) using IQR
Q1 = df['chol'].quantile(0.25)
Q3 = df['chol'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df = df[(df['chol'] >= lower_bound) & (df['chol'] <= upper_bound)]

# Create a figure and a subplot
fig, ax = plt.subplots(figsize=(10, 6))

# Example: Plot a histogram on the subplot
ax.hist(df['age'], bins=20, color='skyblue', edgecolor='black')
ax.set_xlabel('Age')
ax.set_ylabel('Frequency')
ax.set_title('Distribution of Age')

# Add a grid
ax.grid(True, linestyle='--', alpha=0.5)

# Display the plot
plt.show()

age = 50 #@param {type:"slider", min:18, max:100, step:1}
sex = 1 #@param {type:"slider", min:0, max:1, step:1}
cp = 0 #@param {type:"slider", min:0, max:3, step:1}
trestbps = 130 #@param {type:"slider", min:90, max:200, step:1}
chol = 200 #@param {type:"slider", min:100, max:600, step:1}
fbs = 0 #@param {type:"slider", min:0, max:1, step:1}
restecg = 0 #@param {type:"slider", min:0, max:2, step:1}
thalach = 150 #@param {type:"slider", min:70, max:200, step:1}
exang = 0 #@param {type:"slider", min:0, max:1, step:1}
oldpeak = 2.3 #@param {type:"number"}
slope = 0 #@param {type:"slider", min:0, max:2, step:1}
ca = 0 #@param {type:"slider", min:0, max:3, step:1}
thal = 2 #@param {type:"slider", min:0, max:3, step:1}

# Create a DataFrame for the user input
user_input = pd.DataFrame({
    'age': [age],
    'sex': [sex],
    'cp': [cp],
    'trestbps': [trestbps],
    'chol': [chol],
    'fbs': [fbs],
    'restecg': [restecg],
    'thalach': [thalach],
    'exang': [exang],
    'oldpeak': [oldpeak],
    'slope': [slope],
    'ca': [ca],
    'thal': [thal]
})

# Scale the user input using the same scaler used for training
user_input_scaled = scaler.transform(user_input)

# Predict using the trained Random Forest model (you can choose another model)
prediction = rf_model.predict(user_input_scaled)

# Display the prediction
if prediction[0] == 1:
    print("The model predicts a high risk of heart disease.")
else:
    print("The model predicts a low risk of heart disease.")